Modificador static:
Es un modificador que puede ser asignado a un atributos y metodos lo que permite poder acceder a estos miembros sin crear una instancia de la clase que los contiene. 
Ademas en el caso de los atributos el valor es el mismo para cualquier instancia, es decir los valores son globales.
Para acceder a un atributo/metodo static se usa el nombre de la clase:
	
		NombreClase.atributoStatic
		NombreClase.metodoStatic()


Constructores:
Un constructor es un método especial definido dentro de una clase, el objetivo principal de dicho método es inicializar los atributos internos de la clase o ejecutar métodos internos de inicialización.

Caracteristicas de los constructores:
	Tiene el mismo nombre de la clase
	Debe ser public
	No tiene tipo de dato de retorno (inclusive void)
	Puede llevar parametros, usualmente se envia como parametros los valores para inicializar atributos.
	Es el primer metodo que se ejecuta al instanciar (new)
	Puede sobrecargarse.
	En caso de no definir un constructor, Java crea un constructor vacio implicitamente.


Pilares de la programación orientada a objetos(POO - OOP):
	Encapsulación: Consiste en proteger información interna de las clases para evitar modificaciones arbitrarias o no intencionadas.
	Técnicamente la encapsulación se lleva a cabo definiendo todos los atributos de una clase como privados y acceder o asignar valores a ellos utilizando metodos publicos.

	Abstracción: Funcionalidad o caracteristica de los lenguajes de programación orientados a objetos que permite crear funciones o extender funcionalidades que pueden ser utilizadas por terceros, lo que implica que la persona/programador que utilice dichas funcionalidades se abstrae de su funcionamiento detallado.

	Herencia: Es la funcionalidad que permite identificar atributos y metodos en comun entre clases y encapsularlos en una nueva clase.
	Esta nueva clase se convertiría en una clase padre, super clase, y cualquier otra clase que utilice esta nueva clase se le conoce como clase hija, sub clase o clase derivada.
	Aplicar esta funcionalidad permite tener código más legible, ordenado y reutilizable.
		*Para que los atributos puedan ser accedidos desde clases hijas sin perder la encapsulacion se deben declarar los atributos de la clase padre como protected.

		*Sobreescritura de metodos: tecnica que se aplica en herencia para redefinir o escribir nuevamente en la clase hija un metodo que previamente estaba definido en la clase padre. Este nuevo metodo puede tener una funcionalidad completamente diferente.
	

		-Clases Abstractas o Clases Resumen(abstract)
		Son clases que usualmente se definen como clases padre, para definir una clase como abstracta se antepone el modificador abstract.
		Reglas o Caracteristicas:	
			-No se puede instanciar
			-El modificador abstract se puede asignar a metodos, en caso de los metodos abstractos no tienen cuerpo.
			-Los metodos abstractos deben sobreescribirse OBLIGATORIAMENTE en las clases hijas
			-Si dentro de la clase hay al menos un metodo abstracto la clase DEBE ser abstracta.
			-Una clase abstracta puede no tener metodos abstractos.

		-Interfaces (Interface) - Son componentes similares a las clases que se utilizan para simular herencia multiple, ademas de que se utiliza muy a menudo para capturar eventos del usuario.
		Este componente tambien es conocido como clases abstractas puras debido a las siguientes caracteristicas:
		1. No se pueden instanciar
		2. No tienen constructor
		3. Todos sus metodos deben ser abstractos y public
		4. Todos sus atributos deben ser public static final
		5. Se puede utilizar como un elemento padre, para aplicar herencia entre una clase y una interfaz se utiliza implements en vez de extends.
		6. Se puede aplicar herencia entre interfaces, en dicho caso se utiliza extends.
		7. Se puede aplicar herencia utilizando multiples interfaces separadas por coma.
		8. Se declara utilizando la palabra reservada interface.

		Usos de interfaces:
		1. Librerias de constantes.
		2. Estructuras muy genericas.
		3. Para la gestión de eventos.

	Polimorfismo:






Interfaces Gráficas de Usuario (GUI)

	AWT (Abstract Window Toolkit)
	Swing
	JavaFX